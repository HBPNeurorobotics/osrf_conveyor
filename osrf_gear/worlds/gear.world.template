<?xml version="1.0" ?>
<sdf version="1.5">
  <world name="ariac">
    <!-- Set the initial camera pose to be looking at the workspace. -->
    <gui>
      <camera name="user_camera">
        <pose>-3 5 4 0 0.65 -0.685</pose>
      </camera>
    </gui>

@[if not options.disable_shadows]@
    <!-- Disable shadows. -->
    <scene>
      <shadows>false</shadows>
    </scene>
@[end if]@

    <!-- A global light source -->
    <include>
      <uri>model://sun</uri>
    </include>

    <!-- A directed light source -->
    <light name="camera_spot_light" type='spot'>
      <pose>-10 10 10 0 -1 -0.8</pose>
      <diffuse>0.5 0.5 0.5 1</diffuse>
      <specular>0.1 0.1 0.1 1</specular>
      <direction>0 0 -1</direction>
      <attenuation>
        <range>20</range>
        <constant>0.5</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <cast_shadows>0</cast_shadows>
      <spot>
        <inner_angle>0.6</inner_angle>
        <outer_angle>1</outer_angle>
        <falloff>1</falloff>
      </spot>
    </light>

    <!-- the workcell -->
    <include>
      <uri>model://workcell</uri>
      <pose>0 0 0 0 0 1.57</pose>
    </include>

@[for name, sensor in sensors.items()]@
@[if sensor.type == "break_beam"]@
    <!-- a break beam sensor called @(name) -->
    <include>
      <uri>model://break_beam</uri>
      <name>@(name)</name>
      <pose>@(' '.join(sensor.pose.xyz)) @(' '.join(sensor.pose.rpy))</pose>
    </include>

@[end if]@
@[if sensor.type == "proximity_sensor"]@
    <!-- a proximity sensor called @(name) -->
    <include>
      <uri>model://proximity_sensor</uri>
      <name>@(name)</name>
      <pose>@(' '.join(sensor.pose.xyz)) @(' '.join(sensor.pose.rpy))</pose>
    </include>

@[end if]@
@[if sensor.type == "logical_camera"]@
    <!-- a logical camera called @(name) -->
    <include>
      <uri>model://logical_camera</uri>
      <name>@(name)</name>
      <pose>@(' '.join(sensor.pose.xyz)) @(' '.join(sensor.pose.rpy))</pose>
    </include>

@[end if]@
@[if sensor.type == "laser_profiler"]@
    <!-- a laser profiler called @(name) -->
    <include>
      <uri>model://laser_profiler</uri>
      <name>@(name)</name>
      <pose>@(' '.join(sensor.pose.xyz)) @(' '.join(sensor.pose.rpy))</pose>
    </include>

@[end if]@
@[end for]@
    <!-- a wall to delete objects at the end of the belt -->
    <include>
      <uri>model://deletion_wall</uri>
      <pose>1.2 -4.1 1.4 0 0 1.5708</pose>
    </include>

    <!-- an invisible conveyor belt -->
    <model name="conveyor_belt">
      <static>true</static>
      <pose>1.21 5 0.81 0 0 1.57</pose>
      <plugin name="conveyor_belt_plugin" filename="libROSConveyorBeltPlugin.so">
        <belt_velocity>0.2</belt_velocity>
        <velocity_axis>-1 0 0</velocity_axis>
        <contact_sensor_name>conveyor_belt_contact</contact_sensor_name>
      </plugin>
      <link name="belt">
        <pose>-5 0 0 0 0 0</pose>
        <sensor name='conveyor_belt_contact' type='contact'>
          <update_rate>10</update_rate>
          <contact>
            <collision>belt_collision</collision>
          </contact>
        </sensor>
        <collision name="belt_collision">
          <geometry>
            <box>
              <size>19.62206 0.65461 0.18862</size>
            </box>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>0.0</mu>
                <mu2>0.0</mu2>
              </ode>
              <torsional>
                <coefficient>1000.0</coefficient>
                <patch_radius>0.1</patch_radius>
              </torsional>
            </friction>
          </surface>
        </collision>
      </link>
    </model>

    <!-- Populate the conveyor belt -->
    <plugin filename="libPopulationPlugin.so" name="populate_conveyor">
      <activation_topic>~/conveyor/control</activation_topic>
      <loop_forever>true</loop_forever>
      <frame>conveyor_belt</frame>
      <object_sequence>
        <object>
          <time>8.0</time>
          <type>coke_can</type>
          <pose>0 0 0 0 0 0</pose>
        </object>
        <object>
          <time>4.0</time>
          <type>cordless_drill</type>
          <pose>0 0.1 0 0 0 0</pose>
        </object>
        <object>
          <time>12.0</time>
          <type>beer</type>
          <pose>0 -0.1 0 0 0 0</pose>
        </object>
      </object_sequence>
    </plugin>

    <!-- The NIST-ARIAC task manager -->
    <plugin filename="libROSAriacTaskManagerPlugin.so" name="task_manager">
      <robot_namespace>ariac_task_manager</robot_namespace>
      <team_start_service_name>/ariac/start_competition</team_start_service_name>
      <conveyor_activation_topic>~/conveyor/control</conveyor_activation_topic>
      <goals_topic>/ariac/goals</goals_topic>
      <goal>
        <time>0.0</time>
        <kit>
          <object>
            <type>coke_can</type>
            <pose>-1 2.5 0.2 0 0 0</pose>
          </object>
          <object>
            <type>cordless_drill/</type>
            <pose>-1 2.5 0.2 0 0 0</pose>
          </object>
          <object>
            <type>beer</type>
            <pose>-1 2.5 0.2 0 0 0</pose>
          </object>
        </kit>
        <kit>
          <object>
            <type>coke_can</type>
            <pose>-1 2.5 0.2 0 0 0</pose>
          </object>
          <object>
            <type>cordless_drill/</type>
            <pose>-1 2.5 0.2 0 0 0</pose>
          </object>
          <object>
            <type>beer</type>
            <pose>-1 2.5 0.2 0 0 0</pose>
          </object>
        </kit>
      </goal>
    </plugin>

  </world>
</sdf>
