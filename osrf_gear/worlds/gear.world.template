<?xml version="1.0" ?>
<sdf version="1.5">
  <world name="ariac">
    <!-- Set the initial camera pose to be looking at the workspace. -->
    <gui>
      <camera name="user_camera">
        <pose>-4.33 1.88 6.11 0 0.9 -0.27</pose>
      </camera>
    </gui>

    <physics type="ode">
      <max_step_size>0.005</max_step_size>
      <real_time_update_rate>200</real_time_update_rate>
    </physics>

@[if not options['disable_shadows']]@
    <!-- Disable shadows. -->
    <scene>
      <shadows>false</shadows>
    </scene>
@[end if]@

    <!-- A global light source -->
    <include>
      <uri>model://sun</uri>
    </include>

    <!-- A directed light source -->
    <light name="camera_spot_light" type='spot'>
      <pose>-10 10 10 0 -1 -0.8</pose>
      <diffuse>0.5 0.5 0.5 1</diffuse>
      <specular>0.1 0.1 0.1 1</specular>
      <direction>0 0 -1</direction>
      <attenuation>
        <range>20</range>
        <constant>0.5</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <cast_shadows>0</cast_shadows>
      <spot>
        <inner_angle>0.6</inner_angle>
        <outer_angle>1</outer_angle>
        <falloff>1</falloff>
      </spot>
    </light>

    <!-- the workcell -->
    <include>
      <uri>model://workcell</uri>
      <pose>0 0 0 0 0 1.57</pose>
    </include>

@[for bin_name, bin_pose in bins.items()]@
    <include>
      <name>@(bin_name)</name>
      <uri>model://workcell_bin</uri>
      <pose>@(' '.join(bin_pose.xyz)) @(' '.join(bin_pose.rpy))</pose>
    </include>
@[end for]@

@[for name, sensor in sensors.items()]@
@[if sensor.type == "break_beam"]@
    <!-- a break beam sensor called @(name) -->
    <include>
      <uri>model://break_beam</uri>
      <name>@(name)</name>
      <pose>@(' '.join(sensor.pose.xyz)) @(' '.join(sensor.pose.rpy))</pose>
      <static>true</static>
    </include>

@[end if]@
@[if sensor.type == "proximity_sensor"]@
    <!-- a proximity sensor called @(name) -->
    <include>
      <uri>model://proximity_sensor</uri>
      <name>@(name)</name>
      <pose>@(' '.join(sensor.pose.xyz)) @(' '.join(sensor.pose.rpy))</pose>
      <static>true</static>
    </include>

@[end if]@
@[if sensor.type == "logical_camera"]@
    <!-- a logical camera called @(name) -->
    <include>
      <uri>model://logical_camera</uri>
      <name>@(name)</name>
      <pose>@(' '.join(sensor.pose.xyz)) @(' '.join(sensor.pose.rpy))</pose>
      <static>true</static>
    </include>

@[end if]@
@[if sensor.type == "laser_profiler"]@
    <!-- a laser profiler called @(name) -->
    <model name="@(name)">
      <pose>@(' '.join(sensor.pose.xyz)) @(' '.join(sensor.pose.rpy))</pose>
      <static>true</static>
      <link name="link">
        <visual name="body">
          <geometry>
            <box>
              <size>0.093 0.05 0.167</size>
            </box>
          </geometry>
        </visual>
        <collision name='collision'>
          <geometry>
            <box>
              <size>0.093 0.05 0.167</size>
            </box>
          </geometry>
        </collision>
        <sensor name="laser_profiler" type="ray">
          <pose>0 0 0.06 0 0 0</pose>
          <plugin name="proximity_ray_plugin" filename="libgazebo_ros_laser.so" >
            <robotNamespace>ariac</robotNamespace>
            <frameName>@(name)_frame</frameName>
            <topicName>@(name)</topicName>
          </plugin>
          <ray>
            <range>
              <min>0.135</min>
              <max>0.355</max>
              <resolution>0.001</resolution>
            </range>
            <scan>
              <horizontal>
                <samples>100</samples>
                <resolution>1</resolution>
                <min_angle>-0.235</min_angle>
                <max_angle>0.235</max_angle>
              </horizontal>
            </scan>

            <!-- nothing below this line really needs to be modified upon change of sensor model -->

            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.01</stddev>
            </noise>
          </ray>

          <always_on>1</always_on>
          <visualize>true</visualize>
        </sensor>
        <gravity>false</gravity>
        <inertial>
          <mass>0.1</mass>
        </inertial>
      </link>
    </model>

@[end if]@
@[end for]@

    <!-- a wall to delete objects at the end of the belt -->
    <include>
      <uri>model://deletion_wall</uri>
      <pose>1.2 -4.1 1.4 0 0 1.5708</pose>
    </include>



@[if belt_parts]@
<!-- Simulation time at which the last object is spawned (per cycle) -->
@{max_spawn_time = max([max(times.keys()) for times in belt_parts.values()])}@
<!-- If 'time_limit' is not set, the default value is 300 segs -->
@[if not time_limit]@
@{time_limit = 300}
@[end if]@
<!-- Calculate the number of population cycles to run before the end.
     Equivalent to math.ceil(time_limit / max_spawn_time) (without math) -->
@{belt_population_cycles = -(-time_limit // max_spawn_time)}
@[for obj_type, spawn_times in belt_parts.items()]@
    <!-- Pool of @(obj_type) objects -->
    <population name="@(obj_type)_population">
      <model name="populate_conveyor|@(obj_type)">
        <include>
          <uri>model://@(obj_type)</uri>
        </include>
      </model>
      <pose>-16.5 -3 2.1 0 0 0</pose>
      <distribution>
        <type>grid</type>
        <rows>@(belt_population_cycles * len(spawn_times))</rows>
        <cols>1</cols>
        <step>0.2 0.2 0</step>
      </distribution>
    </population>

@[end for]@
@[end if]@

    <!-- AGV1 -->
    <model name ="agv1">
      <pose>0.3 3.3 0 0 0 3.1415</pose>
      <include>
        <uri>model://warehouse_robot</uri>
      </include>
      <plugin name="agv_plugin" filename="libROSAGVPlugin.so">
        <submit_tray_service_name>/ariac/submit_tray</submit_tray_service_name>
        <index>1</index>
      </plugin>

      <!-- a tray for building kits -->
      <include>
        <uri>model://kit_tray</uri>
        <pose>0.0 0.15 0.75 0 0 0</pose>
      </include>

      <!-- join the tray and agv -->
      <joint name="agv_tray" type="fixed">
          <parent>warehouse_robot::link</parent>
          <child>kit_tray::tray</child>
      </joint>
    </model>

    <!-- AGV2 -->
    <model name ="agv2">
      <pose>0.3 -3.3 0 0 0 0</pose>
      <include>
        <uri>model://warehouse_robot</uri>
      </include>
      <plugin name="agv_plugin" filename="libROSAGVPlugin.so">
        <index>2</index>
        <submit_tray_service_name>/ariac/submit_tray</submit_tray_service_name>
      </plugin>

      <!-- a tray for building kits -->
      <include>
        <uri>model://kit_tray</uri>
        <pose>0.0 0.15 0.75 0 0 0</pose>
      </include>

      <!-- join the tray and agv -->
      <joint name="agv_tray" type="fixed">
          <parent>warehouse_robot::link</parent>
          <child>kit_tray::tray</child>
      </joint>
    </model>

    <!-- an invisible conveyor belt -->
    <model name="conveyor_belt">
      <static>true</static>
      <pose>1.21 5 0.81 0 0 1.57</pose>
      <plugin name="conveyor_belt_plugin" filename="libROSConveyorBeltPlugin.so">
        <robot_namespace>/ariac</robot_namespace>
        <belt_start_velocity>0.0</belt_start_velocity>
        <velocity_axis>-1 0 0</velocity_axis>
        <contact_sensor_name>conveyor_belt_contact</contact_sensor_name>
        <update_rate>13</update_rate>
      </plugin>
      <link name="belt">
        <pose>-5 0 0 0 0 0</pose>
        <sensor name='conveyor_belt_contact' type='contact'>
          <update_rate>10</update_rate>
          <contact>
            <collision>belt_collision</collision>
          </contact>
        </sensor>
        <collision name="belt_collision">
          <geometry>
            <box>
              <size>19.62206 0.65461 0.18862</size>
            </box>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>1.0</mu>
                <mu2>1.0</mu2>
              </ode>
              <torsional>
                <coefficient>1000.0</coefficient>
                <patch_radius>0.1</patch_radius>
              </torsional>
            </friction>
          </surface>
        </collision>
      </link>
    </model>

@[if options['insert_models_over_bins']]@
    <!-- Populate the bins -->
@[for model_name, model in models_to_insert.items()]@
    <include>
      <name>@(model_name)</name>
      <uri>model://@(model.type)</uri>
      <pose>@(' '.join(model.pose.xyz)) @(' '.join(model.pose.rpy))</pose>
    </include>
@[end for]@
@[end if]@
@[if belt_parts]@

    <!-- Populate the conveyor belt -->
    <plugin filename="libROSPopulationPlugin.so" name="populate_conveyor">
      <activation_topic>/ariac/populate_belt</activation_topic>
      <control_topic>/ariac/population/control</control_topic>
      <state_topic>/ariac/population/state</state_topic>
      <loop_forever>true</loop_forever>
      <frame>conveyor_belt</frame>
      <object_sequence>
@[for obj_type, spawn_times in belt_parts.items()]@
  @[for spawn_time, part in spawn_times.items()]@
        <object>
          <time>@(spawn_time)</time>
          <type>@(part.type)</type>
          <pose>@(' '.join(part.pose.xyz)) @(' '.join(part.pose.rpy))</pose>
        </object>
  @[end for]@
@[end for]@
      </object_sequence>
      <update_rate>10</update_rate>
    </plugin>
@[end if]@

    <!-- The NIST-ARIAC task manager -->
    <plugin filename="libROSAriacTaskManagerPlugin.so" name="task_manager">
      <robot_namespace>ariac_task_manager</robot_namespace>
      <team_start_service_name>/ariac/start_competition</team_start_service_name>
      <population_activate_topic>/ariac/populate_belt</population_activate_topic>
      <conveyor_control_topic>/ariac/conveyor/control</conveyor_control_topic>
      <submit_tray_service_name>/ariac/submit_tray</submit_tray_service_name>
      <goals_topic>/ariac/orders</goals_topic>
@[for order_name, order in orders.items()]@
      <goal>
        <start_time>@(order['announcement_time'])</start_time>
        <kit>
          <kit_type>@(order_name)</kit_type>
@[for part in order['parts']]@
          <object>
            <type>@(part.type)</type>
            <pose>@(' '.join(part.pose.xyz)) @(' '.join(part.pose.rpy))</pose>
          </object>
@[end for]@
        </kit>
      </goal>
@[end for]@
    </plugin>

@[if options['fill_demo_tray'] and orders]@
@{
order_name, order = orders.items()[0]
count = {}
}@
    <!-- Populate kit tray with order parts -->
    <plugin filename="libPopulationPlugin.so" name="populate_kit_tray_1">
      <activation_topic>/ariac/populate_belt</activation_topic>
      <loop_forever>false</loop_forever>
      <frame>agv1::kit_tray::tray</frame>
      <object_sequence>
@[for part in order['parts']]@
        <object>
          <time>@(order['announcement_time'])</time>
          <type>@(part.type)</type>
          <pose>@(' '.join(part.pose.xyz[0:-1])) 0.1 @(' '.join(part.pose.rpy))</pose>
        </object>
@[end for]@
      </object_sequence>
    </plugin>

    <!-- Insert models to fill the kit tray -->
@[for part in order['parts']]@
@{
try:
    id = count[part.type]
except:
    id = 0
}@
    <include>
      <name>populate_kit_tray_1|@(part.type)_clone_@(id)</name>
      <uri>model://@(part.type)</uri>
      <pose>-7.5 -3 2.1 0 0 0</pose>
    </include>
@{
count[part.type] = id + 1
}@
@[end for]@

@[end if]@

  </world>
</sdf>
