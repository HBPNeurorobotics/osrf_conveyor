<?xml version="1.0"?>
<launch>
  <remap from="joint_states" to="ariac/joint_states" />

  <arg name="limited" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="world_path" />

  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="$(arg world_path)"/>
    <!-- Always start paused because the arm spawn needs it that way. -->
    <arg name="paused" value="true"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="extra_gazebo_args" value="--verbose" />
    <arg name="debug" value="$(arg debug)" />
  </include>
@{
initial_joint_states_string = \
  ' '.join(['-J {0} {1}'.format(k, v) for k, v in arm.initial_joint_states.items()])
}@
@[if arm.type == 'ur10']@

  <!-- load ur10 -->
  <include file="$(find osrf_gear)/launch/ur10/ur10.xml">
    <arg name="limited" value="$(arg limited)" />
    <arg name="extra_spawn_model_args" value="@(initial_joint_states_string)" />
  </include>
@[end if]@

  <!-- spawn models over the bins -->
@[for name, model in models_to_spawn.items()]@
@{
initial_pose_string = \
  ' '.join([val for pair in zip(['-x', '-y', '-z'], model.pose.xyz) for val in pair]) + " " + \
  ' '.join([val for pair in zip(['-R', '-P', '-Y'], model.pose.rpy) for val in pair])
}@

  <node name="osrf_gear_spawn_@(model.name.replace('::', '_'))" pkg="gazebo_ros" type="spawn_model"
    args="
      -file $(find osrf_gear)/models/@(model.type)/model.sdf
      -sdf
      -reference_frame @(model.reference_frame)
      @(initial_pose_string)
      -model @(model.name)" />
@[end for]@

</launch>
